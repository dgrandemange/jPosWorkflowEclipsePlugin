In [http://www.jpos.org/ jPos], the transaction manager component  takes care of ''driving'' the transaction.
To do so,  it relies on smaller units called participants. Participants are components through which the transaction flow may pass. Thus, the jPos transaction manager implementation design enhances code reuse and componentization. The transaction manager provides also some routing functionalities thanks to the ''org.jpos.transaction.GroupSelector''  interface.
Transaction manager is configured via a dedicated XML configuration.
See [http://www.jpos.org/products/proguide jPOS programmer's guide] §10 for more details.

= Primary needs =
The way a transaction is processed may vary based on many criteria.
For example, the transaction type (activation, payment, cancellation ...) may change the way the transaction should be processed. Also, further in the processing, you may have to choose between different processing paths depending on many criteria : card's validity check result, acquirer response (acceptation, reject), ...

When wondering how to efficiently work on transaction manager configuration, and thinking about a process allowing to work incrementally on it so that it can easily be communicated to other people (maybe more business oriented people), one can not simply answer : edit transaction manager's XML configuration and it's done.
 
Having a graphical view would be much more talkative. Besides, a graphical representation (say a diagram state representation for instance) is easier to communicate to non developer people. Editing a workflow in an UML editor is a solution, but edition work needs to be done twice. And what if the workflow often changes ? This is not a very responsive process, with  the risk to loose informations. Eventually, it would be nice if we were able to generate a graphical view on the fly (and at will) straight from the XML transaction manager configuration itself.

Thinking of a graphical representation as a state diagram along its ''states'' and ''transitions'', there would be the transaction participants as ''states'' . But what about ''transitions''? Nothing in a transaction manager configuration formally identifies transitions between a participant and a group. But, taking a further look at §10.8 of jPOS programmer's guide, the configuration sample clearly shows that some properties are used for this purpose and hold a ''transition'' function.  In this sample, we can see properties which gives a list of groups to pass through, depending on the message type (0100, 0200,...). Obviously, theses properties can be used as transitions.
<pre>
...

<participant class="org.jpos.my.Switch" logger="Q2">
	
	&lt;!--
		If MTI is 0100, route to the following participants groups : 
		- Authorization,
		- Response,
		- Log
	--&gt;
	<property name="0100" value="Authorization Response Log" />
	
	&lt;!--
		If MTI is 0200, route to the following participants groups : 
		- Financial,
		- Response,
		- Log
	--&gt;
	<property name="0200" value="Financial Response Log" />

	<property name="0220" value="Notification Response Log" />
	<property name="0221" value="Notification Response Log" />
	<property name="0420" value="Reversal Response Log" />
	<property name="0421" value="Reversal Response Log" />
	<property name="0500" value="BatchManagement Response Log" />
	<property name="0421" value="Reversal Response Log" />
	<property name="0800" value="NetworkManagement Response Log" />
</participant>

...

<group name="Financial">
	<participant class="com.my.company.CheckRequiredFields">
	<property name="fields" value="0,3,4,17,49,32,41,43,37,PAN,AMOUNT" />
	</participant>
	<participant class="com.my.company.CheckCurrency" />
	
	...
	
</group>

<group name="Reversal">
	...
</group>

...
</pre>

= The jPos Workflow Eclipse plugin =
Keeping all of this in mind, a specific Eclipse plugin has been written which at this point provides  :
* conversion of a transaction manager configuration into a directed graph model,
* reduction of the previously generated directed graph,
* graphical view of the reduced graph in a dedicated Eclipse editor,
* image export of Eclipse view (JPG, PNG), 
* GraphViz format export (DOT) for enhanced rendering

Resulting design constraints are :
* keep the transaction participants as atomic as possible, 
* clearly identify transitions properties. In order for the plugin to work, those properties should be formally marked with a special attribute named ''selectCriterion'' , whose value should briefly describe the transition,
* avoid circular references

After adapting the previous transaction manager configuration excerpt to suit these constraints, we obtain the following configuration :
<pre>
<txnmgr name="kdoTxn" logger="Q2"	class="org.jpos.transaction.TransactionManager">

	<participant class="org.jpos.my.Switch" logger="Q2">
	
		<property name="0100" value="Authorization Response Log" 
			selectCriterion="incoming message 0100" />
			
		<property name="0200" value="Financial Response Log"
			 selectCriterion="incoming message 0200" />
			 
		<property name="0220" value="Notification Response Log" 
			selectCriterion="incoming message 0220" />
			
		<property name="0221" value="Notification Response Log" 
			selectCriterion="incoming message 0221" />
			
		<property name="0420" value="Reversal Response Log" 
			selectCriterion="incoming message 0420" />
		
		<property name="0421" value="Reversal Response Log" 
			selectCriterion="incoming message 0421" />
		
		<property name="0500" value="BatchManagement Response Log" 
			selectCriterion="incoming message 0500" />
		
		<property name="0421" value="Reversal Response Log" 
			selectCriterion="incoming message 0421" />
		
		<property name="0800" value="NetworkManagement Response Log" 
			selectCriterion="incoming message 0800" />
	</participant>
	
	<group name="Financial">
		
		<participant class="com.my.company.CheckRequiredFields">
			<property name="fields" value="0,3,4,17,49,32,41,43,37,PAN,AMOUNT" />
		</participant>
		
		<participant class="com.my.company.CheckCurrency" />
		
	</group>
	
	&lt;!-- TODO :  configuration to complete --&lt;
	
</txnmgr>
</pre>

After right-clicking this XML configuration file in the Eclipse Package Explorer view, item menu  ''jPos Workflow -> view graph'' should show up. 

Left-clicking it should open a jPos Workflow view with a graphical representation of the selected configuration :
[[Image:workflowplugin_dummy.jpeg|align=center]]

About this view : 
*  in transaction manager configuration, if some groups are referenced, but not yet defined, the view shows them in red color, 
* transition informations can be seen by mouse over on ''information'' icons,
* double-clicking on a graph node may open the Java source of the associated participant class, provided it is part of the workspace,
* as the number of nodes and transitions may grow quickly, the Eclipse GEF graph layout at some point may become hardly readable; consider then using DOT export for a further GraphViz rendering.

Also, right clicking on jPos Workflow view, you may be able to export the graph as a DOT file (GraphViz format). 

Here is the generated DOT source after such export : 
<pre>
digraph "JPos Workflow Eclipse Plugin DOT Export" {
node [shape="box" peripheries="1" style="filled" color="#000000" fillcolor="#FFFFCE" fontname="Arial" fontsize="10"]
n1 [label="Switch"]
n23 [label="Log:<undefined>"]
n22 [label="Response:<undefined>"]
FINAL [label="" shape="circle" peripheries="2" style="filled" color="#000000" fillcolor="#000000"]
n21 [label="Reversal:<undefined>"]
n3 [label="CheckCurrency"]
n2 [label="CheckRequiredFields"]
n9 [label="Notification:<undefined>"]
n6 [label="NetworkManagement:<undefined>"]
INITIAL [label="" shape="circle" peripheries="1" style="filled" color="#000000" fillcolor="#000000"]
n24 [label="Authorization:<undefined>"]
n15 [label="BatchManagement:<undefined>"]
edge [fontname="Arial" fontsize="8" dir="forward" arrowhead="normal"]
n3 -> n22 [label=""]
n22 -> n23 [label=""]
n6 -> n22 [label=""]
n1 -> n9 [label="incoming message 0221"]
n15 -> n22 [label=""]
n21 -> n22 [label=""]
n9 -> n22 [label=""]
n1 -> n21 [label="incoming message 0420"]
n1 -> n6 [label="incoming message 0800"]
n1 -> n15 [label="incoming message 0500"]
n23 -> FINAL [label=""]
n1 -> n24 [label="incoming message 0100"]
n24 -> n22 [label=""]
INITIAL -> n1 [label=""]
n1 -> n2 [label="incoming message 0200"]
n2 -> n3 [label=""]
}
</pre>

and here is GraphViz rendering of this DOT source :
[[Image:workflowplugin_dot_graphviz_view.jpeg|align=center]]

You may use the [http://sourceforge.net/projects/eclipsegraphviz/ Eclipse GraphViz plugin] for rendering inside your Eclipse IDE. 